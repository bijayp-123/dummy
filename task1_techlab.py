# -*- coding: utf-8 -*-
"""Task1_techlab

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PfvNZJjl5_UNxSwoNeo_Ctr8Bji2ZaIe
"""

pip install billboard.py

# billboard to load data from Billboard.com
import billboard
# pandas to convert data into DataFrame
import pandas as pd

artists = []
year = 2021
for y in range(2022-2006):
    chart = billboard.ChartData('Top-Artists', year=year)
    cnt = 0
    for chr in chart:
        cnt += 1
        if chr.artist not in artists:
                artists.append(chr.artist)
        if cnt == 10:
            break
    
    year -= 1

len(artists)

def getData(type, data, artists, titles, year=None, date=None, label=None):
    if date==None:
        HotChart = billboard.ChartData(type, year=year)
    else:
        HotChart = billboard.ChartData(type, date=date)
    for hot in HotChart:
        # To collect the name of artists that exists in the artist's list and choose another song for the same artist.
        # This is to avoid repeat songs and enter artist doesn't exist in artists list.
        if hot.title not in titles and hot.artist in artists:
                titles.append(hot.title)
                data.append({'Artist': hot.artist, 'Title': hot.title, 'Label': label})
    
    return data, titles

data = []
titles = []
year = 2021
for i in range(2022-2006):
    data, titles = getData('Hot-100-Songs', data, artists, titles, year, label=1) # popular songs
    year -= 1

print(len(data))
print(len(artists))
print(len(titles))

dates = ['2021-12-01','2021-08-01','2021-04-01','2021-01-01',
        '2020-12-01','2020-08-01','2020-04-01','2020-01-01',
        '2019-12-01','2019-08-01','2019-04-01','2019-01-01',
        '2018-12-01','2018-08-01','2018-04-01','2018-01-01',
        '2017-12-01','2017-08-01','2017-04-01','2017-01-01',
        '2016-12-01','2016-08-01','2016-04-01','2016-01-01',
        '2015-12-01','2015-08-01','2015-04-01','2015-01-01',
        '2014-12-01','2014-08-01','2014-04-01','2014-01-01',
        '2013-12-01','2013-08-01','2013-04-01','2013-01-01',
        '2012-12-01','2012-08-01','2012-04-01','2012-01-01',
        '2011-12-01','2011-08-01','2011-04-01','2011-01-01',
        '2010-12-01','2010-08-01','2010-04-01','2010-01-01',
        '2009-12-01','2009-08-01','2009-04-01','2009-01-01',
        '2008-12-01','2008-08-01','2008-04-01','2008-01-01',
        '2007-12-01','2007-08-01','2007-04-01','2007-01-01',
        '2006-12-01','2006-08-01','2006-04-01','2006-01-01']
for date in dates:
    data, titles = getData('hot-100', data, artists, titles, date=date, label=0) # unpopular songs

print(len(data))
print(len(artists))
print(len(titles))

df = pd.DataFrame(data)
df

df.to_csv('Billboard.csv', index=False)

dataset = pd.read_csv('Billboard.csv')
dataset

pwd!

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
dataset = pd.read_csv('Billboard.csv')
print(dataset.shape)
title = list(dataset['Title'])
data =[]
df.to_csv('Billboard.csv',index=False)

pip install youtube_dl

#import os
from requests import get 
from youtube_dl import YoutubeDL

#YDL_options = {'format':'bestaudio','noplaylist':'True'}
#def search(arg,type):
 # with YoutubeDL(YDL_options) as ydl :
  #  try:
   #   get(arg)
    #except:
     # song = ydl.extract_info(f'ytsearc:{arg}',download =True) ['entries'][0]
    #else:
     # song=ydl.extract_info(arg,download = True)
  #oldpath = song['title'] +'[' + song['id'] + '].' + song['ext']
  #newpath = f"{type}/{song['title']}.mp3"
  #os.rename(f"{oldpath}",newpath)
  #return song,newpath
def search(arg):
    with YoutubeDL(YDL_OPTIONS) as ydl:
        try:
            get(arg) 
        except:
            video = ydl.extract_info(f"ytsearch:{arg}", download=False)['entries'][0]
        else:
            video = ydl.extract_info(arg, download=False)

    return video

dataset.reset_index()
del dataset['Title']
dataset.to_csv('Data\DataWithMusic.csv',index=False)

import pandas as pd
dataset= pd.read_csv('Data\DataWithMusic.csv')
#paths = list(dataset['Path'])
Titles =list(dataset['Title'])
data =[]

import warnings
warnings.filterwarnings('ignore')
from pychorus import find_and_output_chorus
def extract_chorus(path,main):
  songname = path.split('/',2)[1].split('.')[0]
  Newpath = main +'/'+ songname + '.wav'
  chorus = find_and_ouput_chorus(path,Newpath,15)
  if chorus == None
    return = None
  else:
    return Newpath

import pandas as pd
df = pd.read_csv('Data\chorusData.csv')
print(df.shape)
df.head()

import librosa
import numpy as np
from scipy.stats import skew,kurtosis
def statistics(list,feature,columns_name,data):
  i=0
  for ele in list:
    _skew = skew(ele)
    columns_name.append(f'{feature}_kew_{i}')
    min = np.min(ele)
    columns_name.append(f'{feature}_min_{i}')
    max = np.max(ele)
    columns_name.append(f'{feature}_max_{i}')
    std = np.std(ele)
    columns_name.append(f'{feature}_std_{i}')
    mean = np.mean(ele)
    columns_name.append(f'{feature}_mean_{i}')
    median = np.median(ele)
    columns_name.append(f'{feature}_median_{i}')
    _kurtosis= kurtosis(ele)
     columns_name.append(f'{feature}_kurtosis_{i}')
     i+=1
     data.append(_skew)
     data.append(min)
     data.append(max)
     data.append(std)
     data.append(mean)
     data.append(median)
     data.append(_kurtosis)
return data
def extract_features(audio_path,title):
 data =[]
 columns_name=['title']
 data.append('title')
 x,sr = librosa.load(audio_path)

 chroma_stft = librosa.feature.chroma(x,sr)
 statistics(chroma_stft,'chroma_stft',columns_name,data)

 chroma_cqt = librosa.feature.chroma_cqt(x,sr)
 statistics(chroma_cqt,'chroma_cqt',columns_name,data)

 chroma_cens = librosa.feature.chroma_cens(x,sr)
 statistics(chroma_cens,'chroma_cens',columns_name,data)